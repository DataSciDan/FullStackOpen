{"version":3,"sources":["services/phonenumbers.js","components/searchbox.js","components/person.js","components/phonenumbers.js","components/enternewcontact.js","components/Notification.js","App.js","index.js"],"names":["baseURL","pickData","response","data","axios","get","then","entry","post","url","id","put","delete","SearchBox","handler","onChange","Person","name","number","deletionHandler","onClick","PhoneNumbers","entries","entriesNow","map","p","EnterNewContact","submitHandler","nameChangeHandler","numberChangeHandler","onSubmit","value","type","Notification","message","isError","styleAll","borderStyle","borderSize","padding","fontSize","style","borderColor","backgroundColor","color","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","entriesToDisplay","setEntriesToDisplay","setMessage","setIsError","hook","phoneNumberServices","useEffect","event","query","target","regex","RegExp","relevant","filter","match","preventDefault","found","find","person","window","confirm","personsCopy","setTimeout","catch","error","personsNow","concat","console","log","modified","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92663031.chunk.js","sourcesContent":["import axios from 'axios';\n\n//const baseURL = \"https://evening-plateau-97025.herokuapp.com/api/persons\";\nconst baseURL = \"http://localhost:3001/api/persons\";\n\nconst pickData = response => response.data;\n\nconst getAll = () => {\n        const request = axios.get(baseURL);\n        return request.then(pickData);\n};\n\nconst create = entry => {\n        const request = axios.post(baseURL, entry);\n        return request.then(pickData);\n};\n\nconst update = entry => {\n        const url = `${baseURL}/${entry.id}`;\n        const request = axios.put(url, entry);\n        return request.then(pickData);\n};\n\nconst remove = id => {\n        const url = `${baseURL}/${id}`;\n        return axios.delete(url);\n};\n\n// eslint-disable-next-line\nexport default { getAll, create, update, remove };","import React from 'react';\n\nconst SearchBox = ({ handler }) => {\n        return (\n                <div>\n                        <input onChange={handler} />\n                </div>\n        )\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Person = ({ name, number, deletionHandler }) => (\n                <p>\n                        {name} {number} <button onClick={() => deletionHandler(name)}>delete</button>\n                </p>\n);\n\nexport default Person;","import React from 'react';\nimport Person from './person';\n\nconst PhoneNumbers = ({entries, deletionHandler}) => {\n        const entriesNow = entries.map(p => <Person key={p.name} name={p.name} number={p.number} deletionHandler={deletionHandler} />);\n        return (\n                <>\n                        <h3>Numbers</h3>\n                        <div>\n                                {entriesNow}\n                        </div>\n                </>\n        );\n};\n\nexport default PhoneNumbers;","import React from 'react';\n\nconst EnterNewContact = ({name, number, submitHandler, nameChangeHandler, numberChangeHandler}) => {\n        return (\n                <>\n                        <h3>Add a new contact</h3>\n                        <form onSubmit={submitHandler}>\n                                <div>\n                                        name: <input value={name} onChange={nameChangeHandler} />\n                                        number: <input value={number} onChange={numberChangeHandler} />\n                                </div>\n                                <div>\n                                        <button type='submit'>add</button>\n                                </div>\n                        </form>\n                </>\n        );\n};\n\nexport default EnterNewContact;","import React from 'react';\n\nconst Notification = ({message, isError}) => {\n        if (message === null) {\n                return null;\n        };\n\n        const styleAll = {\n                borderStyle: 'solid',\n                borderSize: 2,\n                padding: 10,\n                fontSize: 16\n        };\n\n        const errorStyle = {\n                borderColor: 'red',\n                backgroundColor: 'pink',\n                color: 'red'\n        };\n\n        const successStyle = {\n                borderColor: 'green',\n                backgroundColor: 'lightgreen',\n                color: 'green'\n        }\n\n        let style = isError ? {...styleAll, ...errorStyle} : {...styleAll, ...successStyle}\n        \n        return (\n                <div className='notfication' style={style}>\n                        {message}\n                </div>\n        );\n}\n\n\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport phoneNumberServices from './services/phonenumbers';\n// import Person from './components/person';\nimport SearchBox from './components/searchbox';\nimport PhoneNumbers from './components/phonenumbers';\nimport EnterNewContact from './components/enternewcontact';\nimport Notification from './components/Notification';\n\nconst App = () => {\n        const [persons, setPersons] = useState([]);\n        const [newName, setNewName] = useState('new name here');\n        const [newNumber, setNewNumber] = useState('0');\n        const [entriesToDisplay, setEntriesToDisplay] = useState([]);\n        const [message, setMessage] = useState(null);\n        const [isError, setIsError] = useState(false);\n\n        const hook = () => {\n                phoneNumberServices.getAll().then(data => {\n                        setPersons(data);\n                        setEntriesToDisplay(data);\n                });\n        };\n\n        useEffect(hook, []);\n\n        const nameChangeHandler = event => setNewName(event.target.value);\n        const numberChangeHandler = event => setNewNumber(event.target.value);\n        const searchHandler = event => {\n                const query = event.target.value;\n                if (query) {\n                        const regex = new RegExp(`^${query}`, 'i');\n                        const relevant = persons.filter(p => p.name.match(regex));\n                        setEntriesToDisplay(relevant);\n                }\n                else {\n                        setEntriesToDisplay(persons);\n                }\n        };\n\n        const addEntry = event => {\n                event.preventDefault();\n                const found = persons.find(person => person.name === newName)\n                if (!found) {\n                        const newPerson = { name: newName, number: newNumber };\n                        phoneNumberServices.create(newPerson).then( data => {\n                                const personsNow = persons.concat(data);\n                                setPersons(personsNow);\n                                setEntriesToDisplay(personsNow);\n                                setMessage(`${newName} added to phone book with the number ${newNumber}`);\n                                setIsError(false);\n                                setTimeout(() => setMessage(null), 5000);\n                        }).catch(error => {\n                                console.log(error.response.data);\n                        });\n                }\n                else {\n                        const wanted = window.confirm(`${newName} is already in the phonebook. Do you want to overwrite the existing number?`);\n                        if (!wanted) {\n                                return;\n                        }\n                        found.number = newNumber;\n                        phoneNumberServices.update(found).then(entry => {\n                                const personsCopy = [...persons];\n                                for(let person of personsCopy) {\n                                        if (person.id === entry.id) {\n                                                personsCopy.number = entry.number;\n                                                break;\n                                        }\n                                }\n                                setPersons(personsCopy);\n                                setEntriesToDisplay(personsCopy);\n                                setMessage(`Phone number for ${newName} successfully updated to ${newNumber}.`);\n                                setIsError(false);\n                                setTimeout(() => setMessage(null), 5000);\n                        }).catch(error => {\n                                hook();\n                                setMessage(`Information on ${newName} has been deleted from the server`);\n                                setIsError(true);\n                        });\n                }\n        };\n\n        const removeEntry = name => {\n                const wanted = window.confirm(`Delete ${name} and their number?`);\n                if (!wanted) {\n                        return;\n                }\n                const id = persons.find(person => person.name === name).id;\n                phoneNumberServices.remove(id).then(response => {\n                        const modified = entriesToDisplay.filter(e => e.id !== id);\n                        setPersons(modified);\n                        setEntriesToDisplay(modified);\n                        setMessage(`${name} and their number successfully DELETED`);\n                        setIsError(false);\n                        setTimeout(() => setMessage(null), 5000);\n                }).catch(error => {\n                        setMessage(`Entry not in phonebook, perhaps already deleted`);\n                        setIsError(true);\n                        setTimeout(() => setMessage(null), 5000);\n                });\n        };\n\n        return (\n                <div>\n                        <h2>Phonebook</h2>\n\n                        <Notification message={message} isError={isError} />\n\n                        <SearchBox handler={searchHandler} />\n\n                        <EnterNewContact name={newName} number={newNumber} submitHandler={addEntry} nameChangeHandler={nameChangeHandler} numberChangeHandler={numberChangeHandler} />\n\n                        <PhoneNumbers entries={entriesToDisplay} deletionHandler={removeEntry} />\n                </div>\n        );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}